openapi: '3.0.3'
info:
  version: 1.0.0
  title: Location Tracker API
servers:
  - url: http://localhost:3000
paths:
  /groups:
    get:
      tags:
        - Groups
      description: Get a list of groups user owns
      responses:
        200:
          description: A list of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
        - Groups
      description: Create a new group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupChange'
      responses:
        201:
          description: Created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /groups/{groupId}:
    parameters:
      - name: groupId
        description: Group id
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - Groups
      description: Get a group by id
      responses:
        200:
          description: Group data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/GroupNotFound'
    patch:
      tags:
        - Groups
      description: Update group data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupChange'
      responses:
        202:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/GroupNotFound'
    delete:
      tags:
        - Groups
      description: Delete group
      responses:
        204:
          description: Group deleted
        404:
          $ref: '#/components/responses/GroupNotFound'
  /groups/{groupId}/users:
    parameters:
      - name: groupId
        description: Group id
        in: path
        required: true
        schema:
          type: integer
          format: int32
    post:
      tags:
        - Groups
      description: Add user to group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
                  format: int32
                  description: User id
      responses:
        201:
          description: User added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/GroupNotFound'
  /groups/{groupId}/users/{userId}:
    parameters:
      - name: groupId
        description: Group id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: userId
        description: User id
        in: path
        required: true
        schema:
          type: integer
          format: int32
    delete:
      tags:
        - Groups
      description: Remove a user from group
      responses:
        202:
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/GroupOrUserNotFound'
  /places:
    get:
      tags:
        - Places
      description: Get a list of places user owns
      responses:
        200:
          description: A list of places
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
    post:
      tags:
        - Places
      description: Add place
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceChange'
      responses:
        201:
          description: Place added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
  /places/{placeId}:
    parameters:
      - name: placeId
        description: Place id
        in: path
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - Places
      description: Get a place by id
      responses:
        200:
          description: Place info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        404:
          $ref: '#/components/responses/PlaceNotFound'
    delete:
      tags:
        - Places
      description: Remove a places
      responses:
        204:
          description: Places deleted
        404:
          $ref: '#/components/responses/PlaceNotFound'
    patch:
      tags:
        - Places
      description: Update a place
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceChange'
      responses:
        202:
          description: Place updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        404:
          $ref: '#/components/responses/PlaceNotFound'
  /users/me:
    get:
      tags:
        - Users
      description: Get your info
      responses:
        200:
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - Users
      description: Update your info. If yuo change your public key, all your places and received locations will be removed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  type: string
                  minLength: 1
                  maxLength: 512
                  description: User alias
                publicKey:
                  type: string
                  description: User public key
      responses:
        202:
          description: Info updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/auth:
    post:
      tags:
        - Users
      description: Authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuth'
      responses:
        202:
          description: Authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token
  /users/register:
    post:
      tags:
        - Users
      description: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        201:
          description: New user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /locations:
    post:
      tags:
        - Locations
      description: Add locations to history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Location'
      responses:
        201:
          description: Locations added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    get:
      tags:
        - Locations
      description: Get locations
      parameters:
        - name: sender-id
          description: Sender id
          required: false
          in: query
          schema:
            type: integer
            format: int32
        - name: timestamp
          description: A timestamp to filter locations. Only location after that timestamp are returned
          required: false
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: A list of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
components:
  schemas:
    Group:
      description: A group of users that share location
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Group id
        name:
          type: string
          format: byte
          description: Encrypted group name
        color:
          type: string
          maxLength: 6
          minLength: 6
          description: Group color code
        users:
          type: array
          items:
            description: User id
            type: integer
            format: int32
    GroupChange:
      description: Group change
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Group name
        color:
          type: string
          maxLength: 6
          minLength: 6
          description: Group color code
    User:
      description: User
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: User id
        alias:
          type: string
          minLength: 1
          maxLength: 512
          description: User alias
        publicKey:
          type: string
          description: User public key
    UserCreate:
      description: User create data
      type: object
      properties:
        alias:
          type: string
          minLength: 1
          maxLength: 512
          description: User alias
        publicKey:
          type: string
          description: User public key
        password:
          type: string
          description: User password
    Place:
      description: Place
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Place id
        description:
          type: string
          format: byte
          description: Place description
        latitude:
          type: string
          format: byte
          description: Encoded location latitude
        longitude:
          type: string
          format: byte
          description: Encoded location longitude
    PlaceChange:
      description: Place
      type: object
      properties:
        description:
          type: string
          format: byte
          description: Place description
        latitude:
          type: string
          format: byte
          description: Encoded location latitude
        longitude:
          type: string
          format: byte
          description: Encoded location longitude
    UserAuth:
      description: User auth data
      type: object
      properties:
        alias:
          type: string
          minLength: 1
          maxLength: 512
          description: User alias
        password:
          type: string
          description: User password
    Location:
      description: Location
      type: object
      properties:
        senderId:
          type: integer
          format: int32
          description: Sender id
          readOnly: true
        receiverId:
          type: integer
          format: int32
          description: Receiver id
          writeOnly: true
        timestamp:
          type: string
          format: date-time
          description: Location timestamp
        latitude:
          type: string
          format: byte
          description: Encoded location latitude
        longitude:
          type: string
          format: byte
          description: Encoded location longitude
    Error:
      description: Error
      type: object
      properties:
        code:
          type: string
          description: Error code
          maxLength: 128
        message:
          type: string
          description: Error message
  responses:
    GroupNotFound:
      description: Group not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            0:
              $ref: '#/components/examples/GroupNotFound'
    GroupOrUserNotFound:
      description: Group or user not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            0:
              $ref: '#/components/examples/GroupNotFound'
            1:
              $ref: '#/components/examples/UserNotFound'
    PlaceNotFound:
      description: Place not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            0:
              $ref: '#/components/examples/PlaceNotFound'
  examples:
    GroupNotFound:
      description: Group not found
      value:
        code: GROUP_NOT_FOUND
        message: 'Group with id {id} not found'
    UserNotFound:
      description: User not found
      value:
        code: USER_NOT_FOUND
        message: 'User with id {id} not found in group {id}'
    PlaceNotFound:
      description: Place not found
      value:
        code: PLACE_NOT_FOUND
        message: 'Place with id {id} not found in group {id}'